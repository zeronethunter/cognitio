// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: unixfs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_unixfs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_unixfs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_unixfs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_unixfs_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_unixfs_2eproto;
class Data;
struct DataDefaultTypeInternal;
extern DataDefaultTypeInternal _Data_default_instance_;
class Metadata;
struct MetadataDefaultTypeInternal;
extern MetadataDefaultTypeInternal _Metadata_default_instance_;
class UnixTime;
struct UnixTimeDefaultTypeInternal;
extern UnixTimeDefaultTypeInternal _UnixTime_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Data* Arena::CreateMaybeMessage<::Data>(Arena*);
template<> ::Metadata* Arena::CreateMaybeMessage<::Metadata>(Arena*);
template<> ::UnixTime* Arena::CreateMaybeMessage<::UnixTime>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Data_DataType : int {
  Data_DataType_Raw = 0,
  Data_DataType_Directory = 1,
  Data_DataType_File = 2,
  Data_DataType_Metadata = 3,
  Data_DataType_Symlink = 4,
  Data_DataType_HAMTShard = 5
};
bool Data_DataType_IsValid(int value);
constexpr Data_DataType Data_DataType_DataType_MIN = Data_DataType_Raw;
constexpr Data_DataType Data_DataType_DataType_MAX = Data_DataType_HAMTShard;
constexpr int Data_DataType_DataType_ARRAYSIZE = Data_DataType_DataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Data_DataType_descriptor();
template<typename T>
inline const std::string& Data_DataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Data_DataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Data_DataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Data_DataType_descriptor(), enum_t_value);
}
inline bool Data_DataType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Data_DataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Data_DataType>(
    Data_DataType_descriptor(), name, value);
}
// ===================================================================

class Data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Data) */ {
 public:
  inline Data() : Data(nullptr) {}
  ~Data() override;
  explicit PROTOBUF_CONSTEXPR Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Data(const Data& from);
  Data(Data&& from) noexcept
    : Data() {
    *this = ::std::move(from);
  }

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline Data& operator=(Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const Data* internal_default_instance() {
    return reinterpret_cast<const Data*>(
               &_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Data& a, Data& b) {
    a.Swap(&b);
  }
  inline void Swap(Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Data& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Data";
  }
  protected:
  explicit Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Data_DataType DataType;
  static constexpr DataType Raw =
    Data_DataType_Raw;
  static constexpr DataType Directory =
    Data_DataType_Directory;
  static constexpr DataType File =
    Data_DataType_File;
  static constexpr DataType Metadata =
    Data_DataType_Metadata;
  static constexpr DataType Symlink =
    Data_DataType_Symlink;
  static constexpr DataType HAMTShard =
    Data_DataType_HAMTShard;
  static inline bool DataType_IsValid(int value) {
    return Data_DataType_IsValid(value);
  }
  static constexpr DataType DataType_MIN =
    Data_DataType_DataType_MIN;
  static constexpr DataType DataType_MAX =
    Data_DataType_DataType_MAX;
  static constexpr int DataType_ARRAYSIZE =
    Data_DataType_DataType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DataType_descriptor() {
    return Data_DataType_descriptor();
  }
  template<typename T>
  static inline const std::string& DataType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DataType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DataType_Name.");
    return Data_DataType_Name(enum_t_value);
  }
  static inline bool DataType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DataType* value) {
    return Data_DataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBlocksizesFieldNumber = 4,
    kDataFieldNumber = 2,
    kMtimeFieldNumber = 8,
    kFilesizeFieldNumber = 3,
    kTypeFieldNumber = 1,
    kModeFieldNumber = 7,
    kHashTypeFieldNumber = 5,
    kFanoutFieldNumber = 6,
  };
  // repeated uint64 blocksizes = 4;
  int blocksizes_size() const;
  private:
  int _internal_blocksizes_size() const;
  public:
  void clear_blocksizes();
  private:
  uint64_t _internal_blocksizes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_blocksizes() const;
  void _internal_add_blocksizes(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_blocksizes();
  public:
  uint64_t blocksizes(int index) const;
  void set_blocksizes(int index, uint64_t value);
  void add_blocksizes(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      blocksizes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_blocksizes();

  // optional bytes Data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional .UnixTime mtime = 8;
  bool has_mtime() const;
  private:
  bool _internal_has_mtime() const;
  public:
  void clear_mtime();
  const ::UnixTime& mtime() const;
  PROTOBUF_NODISCARD ::UnixTime* release_mtime();
  ::UnixTime* mutable_mtime();
  void set_allocated_mtime(::UnixTime* mtime);
  private:
  const ::UnixTime& _internal_mtime() const;
  ::UnixTime* _internal_mutable_mtime();
  public:
  void unsafe_arena_set_allocated_mtime(
      ::UnixTime* mtime);
  ::UnixTime* unsafe_arena_release_mtime();

  // optional uint64 filesize = 3;
  bool has_filesize() const;
  private:
  bool _internal_has_filesize() const;
  public:
  void clear_filesize();
  uint64_t filesize() const;
  void set_filesize(uint64_t value);
  private:
  uint64_t _internal_filesize() const;
  void _internal_set_filesize(uint64_t value);
  public:

  // required .Data.DataType Type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::Data_DataType type() const;
  void set_type(::Data_DataType value);
  private:
  ::Data_DataType _internal_type() const;
  void _internal_set_type(::Data_DataType value);
  public:

  // optional uint32 mode = 7;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  uint32_t mode() const;
  void set_mode(uint32_t value);
  private:
  uint32_t _internal_mode() const;
  void _internal_set_mode(uint32_t value);
  public:

  // optional uint64 hashType = 5;
  bool has_hashtype() const;
  private:
  bool _internal_has_hashtype() const;
  public:
  void clear_hashtype();
  uint64_t hashtype() const;
  void set_hashtype(uint64_t value);
  private:
  uint64_t _internal_hashtype() const;
  void _internal_set_hashtype(uint64_t value);
  public:

  // optional uint64 fanout = 6;
  bool has_fanout() const;
  private:
  bool _internal_has_fanout() const;
  public:
  void clear_fanout();
  uint64_t fanout() const;
  void set_fanout(uint64_t value);
  private:
  uint64_t _internal_fanout() const;
  void _internal_set_fanout(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > blocksizes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::UnixTime* mtime_;
    uint64_t filesize_;
    int type_;
    uint32_t mode_;
    uint64_t hashtype_;
    uint64_t fanout_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unixfs_2eproto;
};
// -------------------------------------------------------------------

class UnixTime final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnixTime) */ {
 public:
  inline UnixTime() : UnixTime(nullptr) {}
  ~UnixTime() override;
  explicit PROTOBUF_CONSTEXPR UnixTime(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnixTime(const UnixTime& from);
  UnixTime(UnixTime&& from) noexcept
    : UnixTime() {
    *this = ::std::move(from);
  }

  inline UnixTime& operator=(const UnixTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnixTime& operator=(UnixTime&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnixTime& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnixTime* internal_default_instance() {
    return reinterpret_cast<const UnixTime*>(
               &_UnixTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UnixTime& a, UnixTime& b) {
    a.Swap(&b);
  }
  inline void Swap(UnixTime* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnixTime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnixTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnixTime>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnixTime& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UnixTime& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnixTime* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnixTime";
  }
  protected:
  explicit UnixTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecondsFieldNumber = 1,
    kFractionalNanosecondsFieldNumber = 2,
  };
  // required int64 Seconds = 1;
  bool has_seconds() const;
  private:
  bool _internal_has_seconds() const;
  public:
  void clear_seconds();
  int64_t seconds() const;
  void set_seconds(int64_t value);
  private:
  int64_t _internal_seconds() const;
  void _internal_set_seconds(int64_t value);
  public:

  // optional fixed32 FractionalNanoseconds = 2;
  bool has_fractionalnanoseconds() const;
  private:
  bool _internal_has_fractionalnanoseconds() const;
  public:
  void clear_fractionalnanoseconds();
  uint32_t fractionalnanoseconds() const;
  void set_fractionalnanoseconds(uint32_t value);
  private:
  uint32_t _internal_fractionalnanoseconds() const;
  void _internal_set_fractionalnanoseconds(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:UnixTime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int64_t seconds_;
    uint32_t fractionalnanoseconds_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unixfs_2eproto;
};
// -------------------------------------------------------------------

class Metadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Metadata) */ {
 public:
  inline Metadata() : Metadata(nullptr) {}
  ~Metadata() override;
  explicit PROTOBUF_CONSTEXPR Metadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Metadata(const Metadata& from);
  Metadata(Metadata&& from) noexcept
    : Metadata() {
    *this = ::std::move(from);
  }

  inline Metadata& operator=(const Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metadata& operator=(Metadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Metadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const Metadata* internal_default_instance() {
    return reinterpret_cast<const Metadata*>(
               &_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Metadata& a, Metadata& b) {
    a.Swap(&b);
  }
  inline void Swap(Metadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Metadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Metadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Metadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Metadata& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Metadata";
  }
  protected:
  explicit Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMimeTypeFieldNumber = 1,
  };
  // optional string MimeType = 1;
  bool has_mimetype() const;
  private:
  bool _internal_has_mimetype() const;
  public:
  void clear_mimetype();
  const std::string& mimetype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mimetype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mimetype();
  PROTOBUF_NODISCARD std::string* release_mimetype();
  void set_allocated_mimetype(std::string* mimetype);
  private:
  const std::string& _internal_mimetype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mimetype(const std::string& value);
  std::string* _internal_mutable_mimetype();
  public:

  // @@protoc_insertion_point(class_scope:Metadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mimetype_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unixfs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Data

// required .Data.DataType Type = 1;
inline bool Data::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Data::has_type() const {
  return _internal_has_type();
}
inline void Data::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::Data_DataType Data::_internal_type() const {
  return static_cast< ::Data_DataType >(_impl_.type_);
}
inline ::Data_DataType Data::type() const {
  // @@protoc_insertion_point(field_get:Data.Type)
  return _internal_type();
}
inline void Data::_internal_set_type(::Data_DataType value) {
  assert(::Data_DataType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.type_ = value;
}
inline void Data::set_type(::Data_DataType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Data.Type)
}

// optional bytes Data = 2;
inline bool Data::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Data::has_data() const {
  return _internal_has_data();
}
inline void Data::clear_data() {
  _impl_.data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Data::data() const {
  // @@protoc_insertion_point(field_get:Data.Data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Data::set_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Data.Data)
}
inline std::string* Data::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:Data.Data)
  return _s;
}
inline const std::string& Data::_internal_data() const {
  return _impl_.data_.Get();
}
inline void Data::_internal_set_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* Data::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* Data::release_data() {
  // @@protoc_insertion_point(field_release:Data.Data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Data::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Data.Data)
}

// optional uint64 filesize = 3;
inline bool Data::_internal_has_filesize() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Data::has_filesize() const {
  return _internal_has_filesize();
}
inline void Data::clear_filesize() {
  _impl_.filesize_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t Data::_internal_filesize() const {
  return _impl_.filesize_;
}
inline uint64_t Data::filesize() const {
  // @@protoc_insertion_point(field_get:Data.filesize)
  return _internal_filesize();
}
inline void Data::_internal_set_filesize(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.filesize_ = value;
}
inline void Data::set_filesize(uint64_t value) {
  _internal_set_filesize(value);
  // @@protoc_insertion_point(field_set:Data.filesize)
}

// repeated uint64 blocksizes = 4;
inline int Data::_internal_blocksizes_size() const {
  return _impl_.blocksizes_.size();
}
inline int Data::blocksizes_size() const {
  return _internal_blocksizes_size();
}
inline void Data::clear_blocksizes() {
  _impl_.blocksizes_.Clear();
}
inline uint64_t Data::_internal_blocksizes(int index) const {
  return _impl_.blocksizes_.Get(index);
}
inline uint64_t Data::blocksizes(int index) const {
  // @@protoc_insertion_point(field_get:Data.blocksizes)
  return _internal_blocksizes(index);
}
inline void Data::set_blocksizes(int index, uint64_t value) {
  _impl_.blocksizes_.Set(index, value);
  // @@protoc_insertion_point(field_set:Data.blocksizes)
}
inline void Data::_internal_add_blocksizes(uint64_t value) {
  _impl_.blocksizes_.Add(value);
}
inline void Data::add_blocksizes(uint64_t value) {
  _internal_add_blocksizes(value);
  // @@protoc_insertion_point(field_add:Data.blocksizes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
Data::_internal_blocksizes() const {
  return _impl_.blocksizes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
Data::blocksizes() const {
  // @@protoc_insertion_point(field_list:Data.blocksizes)
  return _internal_blocksizes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
Data::_internal_mutable_blocksizes() {
  return &_impl_.blocksizes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
Data::mutable_blocksizes() {
  // @@protoc_insertion_point(field_mutable_list:Data.blocksizes)
  return _internal_mutable_blocksizes();
}

// optional uint64 hashType = 5;
inline bool Data::_internal_has_hashtype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Data::has_hashtype() const {
  return _internal_has_hashtype();
}
inline void Data::clear_hashtype() {
  _impl_.hashtype_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint64_t Data::_internal_hashtype() const {
  return _impl_.hashtype_;
}
inline uint64_t Data::hashtype() const {
  // @@protoc_insertion_point(field_get:Data.hashType)
  return _internal_hashtype();
}
inline void Data::_internal_set_hashtype(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.hashtype_ = value;
}
inline void Data::set_hashtype(uint64_t value) {
  _internal_set_hashtype(value);
  // @@protoc_insertion_point(field_set:Data.hashType)
}

// optional uint64 fanout = 6;
inline bool Data::_internal_has_fanout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Data::has_fanout() const {
  return _internal_has_fanout();
}
inline void Data::clear_fanout() {
  _impl_.fanout_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint64_t Data::_internal_fanout() const {
  return _impl_.fanout_;
}
inline uint64_t Data::fanout() const {
  // @@protoc_insertion_point(field_get:Data.fanout)
  return _internal_fanout();
}
inline void Data::_internal_set_fanout(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.fanout_ = value;
}
inline void Data::set_fanout(uint64_t value) {
  _internal_set_fanout(value);
  // @@protoc_insertion_point(field_set:Data.fanout)
}

// optional uint32 mode = 7;
inline bool Data::_internal_has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Data::has_mode() const {
  return _internal_has_mode();
}
inline void Data::clear_mode() {
  _impl_.mode_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t Data::_internal_mode() const {
  return _impl_.mode_;
}
inline uint32_t Data::mode() const {
  // @@protoc_insertion_point(field_get:Data.mode)
  return _internal_mode();
}
inline void Data::_internal_set_mode(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.mode_ = value;
}
inline void Data::set_mode(uint32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:Data.mode)
}

// optional .UnixTime mtime = 8;
inline bool Data::_internal_has_mtime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mtime_ != nullptr);
  return value;
}
inline bool Data::has_mtime() const {
  return _internal_has_mtime();
}
inline void Data::clear_mtime() {
  if (_impl_.mtime_ != nullptr) _impl_.mtime_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::UnixTime& Data::_internal_mtime() const {
  const ::UnixTime* p = _impl_.mtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::UnixTime&>(
      ::_UnixTime_default_instance_);
}
inline const ::UnixTime& Data::mtime() const {
  // @@protoc_insertion_point(field_get:Data.mtime)
  return _internal_mtime();
}
inline void Data::unsafe_arena_set_allocated_mtime(
    ::UnixTime* mtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mtime_);
  }
  _impl_.mtime_ = mtime;
  if (mtime) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Data.mtime)
}
inline ::UnixTime* Data::release_mtime() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::UnixTime* temp = _impl_.mtime_;
  _impl_.mtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::UnixTime* Data::unsafe_arena_release_mtime() {
  // @@protoc_insertion_point(field_release:Data.mtime)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::UnixTime* temp = _impl_.mtime_;
  _impl_.mtime_ = nullptr;
  return temp;
}
inline ::UnixTime* Data::_internal_mutable_mtime() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.mtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::UnixTime>(GetArenaForAllocation());
    _impl_.mtime_ = p;
  }
  return _impl_.mtime_;
}
inline ::UnixTime* Data::mutable_mtime() {
  ::UnixTime* _msg = _internal_mutable_mtime();
  // @@protoc_insertion_point(field_mutable:Data.mtime)
  return _msg;
}
inline void Data::set_allocated_mtime(::UnixTime* mtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.mtime_;
  }
  if (mtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mtime);
    if (message_arena != submessage_arena) {
      mtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mtime, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.mtime_ = mtime;
  // @@protoc_insertion_point(field_set_allocated:Data.mtime)
}

// -------------------------------------------------------------------

// UnixTime

// required int64 Seconds = 1;
inline bool UnixTime::_internal_has_seconds() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UnixTime::has_seconds() const {
  return _internal_has_seconds();
}
inline void UnixTime::clear_seconds() {
  _impl_.seconds_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t UnixTime::_internal_seconds() const {
  return _impl_.seconds_;
}
inline int64_t UnixTime::seconds() const {
  // @@protoc_insertion_point(field_get:UnixTime.Seconds)
  return _internal_seconds();
}
inline void UnixTime::_internal_set_seconds(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.seconds_ = value;
}
inline void UnixTime::set_seconds(int64_t value) {
  _internal_set_seconds(value);
  // @@protoc_insertion_point(field_set:UnixTime.Seconds)
}

// optional fixed32 FractionalNanoseconds = 2;
inline bool UnixTime::_internal_has_fractionalnanoseconds() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UnixTime::has_fractionalnanoseconds() const {
  return _internal_has_fractionalnanoseconds();
}
inline void UnixTime::clear_fractionalnanoseconds() {
  _impl_.fractionalnanoseconds_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t UnixTime::_internal_fractionalnanoseconds() const {
  return _impl_.fractionalnanoseconds_;
}
inline uint32_t UnixTime::fractionalnanoseconds() const {
  // @@protoc_insertion_point(field_get:UnixTime.FractionalNanoseconds)
  return _internal_fractionalnanoseconds();
}
inline void UnixTime::_internal_set_fractionalnanoseconds(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.fractionalnanoseconds_ = value;
}
inline void UnixTime::set_fractionalnanoseconds(uint32_t value) {
  _internal_set_fractionalnanoseconds(value);
  // @@protoc_insertion_point(field_set:UnixTime.FractionalNanoseconds)
}

// -------------------------------------------------------------------

// Metadata

// optional string MimeType = 1;
inline bool Metadata::_internal_has_mimetype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Metadata::has_mimetype() const {
  return _internal_has_mimetype();
}
inline void Metadata::clear_mimetype() {
  _impl_.mimetype_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Metadata::mimetype() const {
  // @@protoc_insertion_point(field_get:Metadata.MimeType)
  return _internal_mimetype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Metadata::set_mimetype(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.mimetype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Metadata.MimeType)
}
inline std::string* Metadata::mutable_mimetype() {
  std::string* _s = _internal_mutable_mimetype();
  // @@protoc_insertion_point(field_mutable:Metadata.MimeType)
  return _s;
}
inline const std::string& Metadata::_internal_mimetype() const {
  return _impl_.mimetype_.Get();
}
inline void Metadata::_internal_set_mimetype(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.mimetype_.Set(value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_mimetype() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.mimetype_.Mutable(GetArenaForAllocation());
}
inline std::string* Metadata::release_mimetype() {
  // @@protoc_insertion_point(field_release:Metadata.MimeType)
  if (!_internal_has_mimetype()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.mimetype_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mimetype_.IsDefault()) {
    _impl_.mimetype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Metadata::set_allocated_mimetype(std::string* mimetype) {
  if (mimetype != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.mimetype_.SetAllocated(mimetype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mimetype_.IsDefault()) {
    _impl_.mimetype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Metadata.MimeType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Data_DataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Data_DataType>() {
  return ::Data_DataType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_unixfs_2eproto
